{"version":3,"file":"assets-service_C_DDLYkv.mjs","sources":["../../../../node_modules/astro/dist/assets/consts.js","../../../../node_modules/astro/dist/assets/utils/imageKind.js","../../../../node_modules/astro/dist/assets/utils/remotePattern.js","../../../../node_modules/astro/dist/assets/services/service.js","../../../../node_modules/astro/dist/assets/services/sharp.js"],"sourcesContent":["const VIRTUAL_MODULE_ID = \"astro:assets\";\nconst VIRTUAL_SERVICE_ID = \"virtual:image-service\";\nconst VALID_INPUT_FORMATS = [\n  \"jpeg\",\n  \"jpg\",\n  \"png\",\n  \"tiff\",\n  \"webp\",\n  \"gif\",\n  \"svg\",\n  \"avif\"\n];\nconst VALID_SUPPORTED_FORMATS = [\n  \"jpeg\",\n  \"jpg\",\n  \"png\",\n  \"tiff\",\n  \"webp\",\n  \"gif\",\n  \"svg\",\n  \"avif\"\n];\nconst DEFAULT_OUTPUT_FORMAT = \"webp\";\nconst VALID_OUTPUT_FORMATS = [\"avif\", \"png\", \"webp\", \"jpeg\", \"jpg\", \"svg\"];\nconst DEFAULT_HASH_PROPS = [\"src\", \"width\", \"height\", \"format\", \"quality\"];\nexport {\n  DEFAULT_HASH_PROPS,\n  DEFAULT_OUTPUT_FORMAT,\n  VALID_INPUT_FORMATS,\n  VALID_OUTPUT_FORMATS,\n  VALID_SUPPORTED_FORMATS,\n  VIRTUAL_MODULE_ID,\n  VIRTUAL_SERVICE_ID\n};\n","function isESMImportedImage(src) {\n  return typeof src === \"object\";\n}\nfunction isRemoteImage(src) {\n  return typeof src === \"string\";\n}\nexport {\n  isESMImportedImage,\n  isRemoteImage\n};\n","import { isRemotePath } from \"@astrojs/internal-helpers/path\";\nfunction matchPattern(url, remotePattern) {\n  return matchProtocol(url, remotePattern.protocol) && matchHostname(url, remotePattern.hostname, true) && matchPort(url, remotePattern.port) && matchPathname(url, remotePattern.pathname, true);\n}\nfunction matchPort(url, port) {\n  return !port || port === url.port;\n}\nfunction matchProtocol(url, protocol) {\n  return !protocol || protocol === url.protocol.slice(0, -1);\n}\nfunction matchHostname(url, hostname, allowWildcard) {\n  if (!hostname) {\n    return true;\n  } else if (!allowWildcard || !hostname.startsWith(\"*\")) {\n    return hostname === url.hostname;\n  } else if (hostname.startsWith(\"**.\")) {\n    const slicedHostname = hostname.slice(2);\n    return slicedHostname !== url.hostname && url.hostname.endsWith(slicedHostname);\n  } else if (hostname.startsWith(\"*.\")) {\n    const slicedHostname = hostname.slice(1);\n    const additionalSubdomains = url.hostname.replace(slicedHostname, \"\").split(\".\").filter(Boolean);\n    return additionalSubdomains.length === 1;\n  }\n  return false;\n}\nfunction matchPathname(url, pathname, allowWildcard) {\n  if (!pathname) {\n    return true;\n  } else if (!allowWildcard || !pathname.endsWith(\"*\")) {\n    return pathname === url.pathname;\n  } else if (pathname.endsWith(\"/**\")) {\n    const slicedPathname = pathname.slice(0, -2);\n    return slicedPathname !== url.pathname && url.pathname.startsWith(slicedPathname);\n  } else if (pathname.endsWith(\"/*\")) {\n    const slicedPathname = pathname.slice(0, -1);\n    const additionalPathChunks = url.pathname.replace(slicedPathname, \"\").split(\"/\").filter(Boolean);\n    return additionalPathChunks.length === 1;\n  }\n  return false;\n}\nfunction isRemoteAllowed(src, {\n  domains = [],\n  remotePatterns = []\n}) {\n  if (!isRemotePath(src))\n    return false;\n  const url = new URL(src);\n  return domains.some((domain) => matchHostname(url, domain)) || remotePatterns.some((remotePattern) => matchPattern(url, remotePattern));\n}\nexport {\n  isRemoteAllowed,\n  matchHostname,\n  matchPathname,\n  matchPattern,\n  matchPort,\n  matchProtocol\n};\n","import { AstroError, AstroErrorData } from \"../../core/errors/index.js\";\nimport { isRemotePath, joinPaths } from \"../../core/path.js\";\nimport { DEFAULT_HASH_PROPS, DEFAULT_OUTPUT_FORMAT, VALID_SUPPORTED_FORMATS } from \"../consts.js\";\nimport { isESMImportedImage } from \"../utils/imageKind.js\";\nimport { isRemoteAllowed } from \"../utils/remotePattern.js\";\nfunction isLocalService(service) {\n  if (!service) {\n    return false;\n  }\n  return \"transform\" in service;\n}\nfunction parseQuality(quality) {\n  let result = parseInt(quality);\n  if (Number.isNaN(result)) {\n    return quality;\n  }\n  return result;\n}\nconst baseService = {\n  propertiesToHash: DEFAULT_HASH_PROPS,\n  validateOptions(options) {\n    if (!options.src || typeof options.src !== \"string\" && typeof options.src !== \"object\") {\n      throw new AstroError({\n        ...AstroErrorData.ExpectedImage,\n        message: AstroErrorData.ExpectedImage.message(\n          JSON.stringify(options.src),\n          typeof options.src,\n          JSON.stringify(options, (_, v) => v === void 0 ? null : v)\n        )\n      });\n    }\n    if (!isESMImportedImage(options.src)) {\n      if (options.src.startsWith(\"/@fs/\") || !isRemotePath(options.src) && !options.src.startsWith(\"/\")) {\n        throw new AstroError({\n          ...AstroErrorData.LocalImageUsedWrongly,\n          message: AstroErrorData.LocalImageUsedWrongly.message(options.src)\n        });\n      }\n      let missingDimension;\n      if (!options.width && !options.height) {\n        missingDimension = \"both\";\n      } else if (!options.width && options.height) {\n        missingDimension = \"width\";\n      } else if (options.width && !options.height) {\n        missingDimension = \"height\";\n      }\n      if (missingDimension) {\n        throw new AstroError({\n          ...AstroErrorData.MissingImageDimension,\n          message: AstroErrorData.MissingImageDimension.message(missingDimension, options.src)\n        });\n      }\n    } else {\n      if (!VALID_SUPPORTED_FORMATS.includes(options.src.format)) {\n        throw new AstroError({\n          ...AstroErrorData.UnsupportedImageFormat,\n          message: AstroErrorData.UnsupportedImageFormat.message(\n            options.src.format,\n            options.src.src,\n            VALID_SUPPORTED_FORMATS\n          )\n        });\n      }\n      if (options.widths && options.densities) {\n        throw new AstroError(AstroErrorData.IncompatibleDescriptorOptions);\n      }\n      if (options.src.format === \"svg\") {\n        options.format = \"svg\";\n      }\n      if (options.src.format === \"svg\" && options.format !== \"svg\" || options.src.format !== \"svg\" && options.format === \"svg\") {\n        throw new AstroError(AstroErrorData.UnsupportedImageConversion);\n      }\n    }\n    if (!options.format) {\n      options.format = DEFAULT_OUTPUT_FORMAT;\n    }\n    if (options.width)\n      options.width = Math.round(options.width);\n    if (options.height)\n      options.height = Math.round(options.height);\n    return options;\n  },\n  getHTMLAttributes(options) {\n    const { targetWidth, targetHeight } = getTargetDimensions(options);\n    const { src, width, height, format, quality, densities, widths, formats, ...attributes } = options;\n    return {\n      ...attributes,\n      width: targetWidth,\n      height: targetHeight,\n      loading: attributes.loading ?? \"lazy\",\n      decoding: attributes.decoding ?? \"async\"\n    };\n  },\n  getSrcSet(options) {\n    const srcSet = [];\n    const { targetWidth } = getTargetDimensions(options);\n    const { widths, densities } = options;\n    const targetFormat = options.format ?? DEFAULT_OUTPUT_FORMAT;\n    let imageWidth = options.width;\n    let maxWidth = Infinity;\n    if (isESMImportedImage(options.src)) {\n      imageWidth = options.src.width;\n      maxWidth = imageWidth;\n    }\n    const {\n      width: transformWidth,\n      height: transformHeight,\n      ...transformWithoutDimensions\n    } = options;\n    const allWidths = [];\n    if (densities) {\n      const densityValues = densities.map((density) => {\n        if (typeof density === \"number\") {\n          return density;\n        } else {\n          return parseFloat(density);\n        }\n      });\n      const densityWidths = densityValues.sort().map((density) => Math.round(targetWidth * density));\n      allWidths.push(\n        ...densityWidths.map((width, index) => ({\n          maxTargetWidth: Math.min(width, maxWidth),\n          descriptor: `${densityValues[index]}x`\n        }))\n      );\n    } else if (widths) {\n      allWidths.push(\n        ...widths.map((width) => ({\n          maxTargetWidth: Math.min(width, maxWidth),\n          descriptor: `${width}w`\n        }))\n      );\n    }\n    for (const { maxTargetWidth, descriptor } of allWidths) {\n      const srcSetTransform = { ...transformWithoutDimensions };\n      if (maxTargetWidth !== imageWidth) {\n        srcSetTransform.width = maxTargetWidth;\n      } else {\n        if (options.width && options.height) {\n          srcSetTransform.width = options.width;\n          srcSetTransform.height = options.height;\n        }\n      }\n      srcSet.push({\n        transform: srcSetTransform,\n        descriptor,\n        attributes: {\n          type: `image/${targetFormat}`\n        }\n      });\n    }\n    return srcSet;\n  },\n  getURL(options, imageConfig) {\n    const searchParams = new URLSearchParams();\n    if (isESMImportedImage(options.src)) {\n      searchParams.append(\"href\", options.src.src);\n    } else if (isRemoteAllowed(options.src, imageConfig)) {\n      searchParams.append(\"href\", options.src);\n    } else {\n      return options.src;\n    }\n    const params = {\n      w: \"width\",\n      h: \"height\",\n      q: \"quality\",\n      f: \"format\"\n    };\n    Object.entries(params).forEach(([param, key]) => {\n      options[key] && searchParams.append(param, options[key].toString());\n    });\n    const imageEndpoint = joinPaths(import.meta.env.BASE_URL, \"/_image\");\n    return `${imageEndpoint}?${searchParams}`;\n  },\n  parseURL(url) {\n    const params = url.searchParams;\n    if (!params.has(\"href\")) {\n      return void 0;\n    }\n    const transform = {\n      src: params.get(\"href\"),\n      width: params.has(\"w\") ? parseInt(params.get(\"w\")) : void 0,\n      height: params.has(\"h\") ? parseInt(params.get(\"h\")) : void 0,\n      format: params.get(\"f\"),\n      quality: params.get(\"q\")\n    };\n    return transform;\n  }\n};\nfunction getTargetDimensions(options) {\n  let targetWidth = options.width;\n  let targetHeight = options.height;\n  if (isESMImportedImage(options.src)) {\n    const aspectRatio = options.src.width / options.src.height;\n    if (targetHeight && !targetWidth) {\n      targetWidth = Math.round(targetHeight * aspectRatio);\n    } else if (targetWidth && !targetHeight) {\n      targetHeight = Math.round(targetWidth / aspectRatio);\n    } else if (!targetWidth && !targetHeight) {\n      targetWidth = options.src.width;\n      targetHeight = options.src.height;\n    }\n  }\n  return {\n    targetWidth,\n    targetHeight\n  };\n}\nexport {\n  baseService,\n  isLocalService,\n  parseQuality\n};\n","import { AstroError, AstroErrorData } from \"../../core/errors/index.js\";\nimport {\n  baseService,\n  parseQuality\n} from \"./service.js\";\nlet sharp;\nconst qualityTable = {\n  low: 25,\n  mid: 50,\n  high: 80,\n  max: 100\n};\nasync function loadSharp() {\n  let sharpImport;\n  try {\n    sharpImport = (await import(\"sharp\")).default;\n  } catch (e) {\n    throw new AstroError(AstroErrorData.MissingSharp);\n  }\n  return sharpImport;\n}\nconst sharpService = {\n  validateOptions: baseService.validateOptions,\n  getURL: baseService.getURL,\n  parseURL: baseService.parseURL,\n  getHTMLAttributes: baseService.getHTMLAttributes,\n  getSrcSet: baseService.getSrcSet,\n  async transform(inputBuffer, transformOptions, config) {\n    if (!sharp)\n      sharp = await loadSharp();\n    const transform = transformOptions;\n    if (transform.format === \"svg\")\n      return { data: inputBuffer, format: \"svg\" };\n    const result = sharp(inputBuffer, {\n      failOnError: false,\n      pages: -1,\n      limitInputPixels: config.service.config.limitInputPixels\n    });\n    result.rotate();\n    if (transform.height && !transform.width) {\n      result.resize({ height: Math.round(transform.height) });\n    } else if (transform.width) {\n      result.resize({ width: Math.round(transform.width) });\n    }\n    if (transform.format) {\n      let quality = void 0;\n      if (transform.quality) {\n        const parsedQuality = parseQuality(transform.quality);\n        if (typeof parsedQuality === \"number\") {\n          quality = parsedQuality;\n        } else {\n          quality = transform.quality in qualityTable ? qualityTable[transform.quality] : void 0;\n        }\n      }\n      result.toFormat(transform.format, { quality });\n    }\n    const { data, info } = await result.toBuffer({ resolveWithObject: true });\n    return {\n      data,\n      format: info.format\n    };\n  }\n};\nvar sharp_default = sharpService;\nexport {\n  sharp_default as default\n};\n"],"names":["AstroErrorData.ExpectedImage","AstroErrorData.LocalImageUsedWrongly","AstroErrorData.MissingImageDimension","AstroErrorData.UnsupportedImageFormat","AstroErrorData.IncompatibleDescriptorOptions","AstroErrorData.UnsupportedImageConversion","AstroErrorData.MissingSharp"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}